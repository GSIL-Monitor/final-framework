<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.com.likly.finalframework.mybatis.mapper.DefaultMapper">

    <!--=================================================    insert    =================================================-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        <include refid="insert"/>
    </insert>

    <insert id="insertUuid">
        <selectKey keyProperty="id" resultType="java.lang.String" order="BEFORE">
            SELECT REPLACE(UUID(), '-', '') FROM dual
        </selectKey>
        <include refid="insert"/>
    </insert>

    <insert id="insertMd5">
        <selectKey keyProperty="id" resultType="java.lang.String" order="BEFORE">
            SELECT MD5(REPLACE(UUID(), '-', '')) FROM dual
        </selectKey>
        <include refid="insert"/>
    </insert>

    <insert id="insertOther">
        <include refid="insert"/>
    </insert>

    <sql id="insert">
        INSERT INTO ${holder.table.table}
        <foreach collection="holder.properties" item="item" open="(" separator="," close=")">
            <if test="item.insert">${item.column}</if>
        </foreach>
        VALUES
        <choose>
            <when test="command.contains('ARRAY')">
                <foreach collection="array" index="index" item="entity" separator=",">
                    <foreach collection="holder.properties" item="item" open="(" separator="," close=")">
                        <if test="item.insert">#{array[${index}].${item.property}${item.javaTypeHandler}}</if>
                    </foreach>
                </foreach>
            </when>
            <when test="command.contains('LIST')">
                <foreach collection="list" index="index" item="entity" separator=",">
                    <foreach collection="holder.properties" item="item" open="(" separator="," close=")">
                        <if test="item.insert">#{list[${index}].${item.property}${item.javaTypeHandler}}</if>
                    </foreach>
                </foreach>
            </when>
        </choose>
    </sql>


    <!--=================================================    delete    =================================================-->
    <delete id="delete">
        DELETE FROM ${holder.table.table}
        <include refid="where"/>
    </delete>
    <!--=================================================    update    =================================================-->

    <update id="update">
        UPDATE ${holder.table.table}
        <include refid="update"/>
        <include refid="where"/>
    </update>

    <!-- update set -->

    <sql id="update">
        <set>
            <choose>
                <when test="command.contains('SETS')">
                    <foreach collection="sets" item="item" separator=",">
                        <include refid="update_set_item"/>
                    </foreach>
                </when>
                <when test="command.contains('ENTITY')">
                    <foreach collection="holder.properties" item="item" separator=",">
                        <if test="item.update">
                            ${item.column} = #{entity.${item.property}${item.javaTypeHandler}}
                        </if>
                    </foreach>
                </when>
                <when test="command.contains('CRITERIA')">
                    <foreach collection="criteria.sets" item="item" separator=",">
                        <include refid="update_set_item"/>
                    </foreach>
                </when>
            </choose>
        </set>
    </sql>

    <sql id="update_set_item">
        <choose>
            <when test="item.operation.equal('EQUAL')">
                ${item.column} = #{item.value}
            </when>
            <when test="item.operation.equal('INCR')">
                ${item.column} = ${item.column} + 1
            </when>
            <when test="item.operation.equal('INCRBY')">
                ${item.column} = ${item.column} + #{item.value}
            </when>
            <when test="item.operation.equal('DECR')">
                ${item.column} = ${item.column} - 1
            </when>
            <when test="item.operation.equal('DECRBY')">
                ${item.column} = ${item.column} - #{item.value}
            </when>
        </choose>
    </sql>

    <!--=================================================    select    =================================================-->


    <select id="selectOne" resultType="java.lang.Object">
        <include refid="select_column"/>
        <include refid="form"/>
        <include refid="where"/>
    </select>
    <select id="select" resultType="java.lang.Object">
        <include refid="select_column"/>
        <include refid="form"/>
        <include refid="where"/>
    </select>

    <select id="selectCount" resultType="java.lang.Long">
        SELECT COUNT(*)
        <include refid="form"/>
        <include refid="criteria"/>
    </select>

    <sql id="select_column">
        SELECT
        <foreach collection="holder.properties" item="item" separator=",">
            <if test="item.select">${item.selectColumn}</if>
        </foreach>
    </sql>
    <!--=================================================    form    =================================================-->

    <sql id="form">
        FROM ${holder.table.table}
    </sql>

    <!--=================================================    where    =================================================-->

    <sql id="where">
        <choose>
            <when test="command.contains('IDS')">
                <where>
                    ${holder.primaryKey.column} IN
                    <foreach collection="ids" item="id" open="(" separator="," close=")">
                        #{id}
                    </foreach>
                </where>
            </when>
            <when test="command.contains('ID')">
                <where>
                    ${holder.primaryKey.column} = #{id}
                </where>
            </when>
            <when test="command.contains('ENTITIES')">
                <where>
                    ${holder.primaryKey.column} IN
                    <foreach collection="entities" item="entity" open="(" separator="," close=")">
                        #{entity.${holder.primaryKey.property}}
                    </foreach>
                </where>
            </when>
            <when test="command.contains('CRITERIA')">
                <include refid="criteria"/>
            </when>
            <when test="command.contains('ENTITY')">
                WHERE ${holder.primaryKey.column} = #{entity.${holder.primaryKey.property}}
            </when>
        </choose>
    </sql>

    <!--=================================================    criteria    =================================================-->
    <sql id="criteria">
        <if test="criteria != null">
            <if test="criteria.where != null">
                <where>
                    <foreach collection="criteria.where" item="item">
                        ${item.andOr.name}
                        <choose>
                            <when test="item.columns.size == 1">
                                <foreach collection="item.columns" index="index" item="item">
                                    <include refid="where_column_item"/>
                                </foreach>
                            </when>
                            <when test="item.columns.size > 1">
                                <foreach collection="item.columns" index="index" item="item" open="(" close=")">
                                    <include refid="where_column_item"/>
                                </foreach>
                            </when>
                        </choose>
                    </foreach>
                </where>
            </if>
            <if test="criteria.order != null">
                ORDER BY
                <foreach collection="criteria.order" item="item" separator=",">
                    #{item.column} ${item.order.name}
                </foreach>
            </if>
            <if test="criteria.limit != null">
                LIMIT #{criteria.limit}
            </if>
        </if>
    </sql>

    <sql id="where_column_item">
        <if test="index != 0">
            ${item.andOr.name}
        </if>
        <choose>
            <when test="item.operation.name == 'EQUAL'">
                <![CDATA[ ${item.column} = #{item.value} ]]></when>
            <when test="item.operation.name == 'NOT_EQUAL'">
                <![CDATA[ ${item.column} != #{item.value} ]]></when>
            <when test="item.operation.name == 'GREAT_THAN'">
                <![CDATA[ ${item.column} > #{item.value} ]]></when>
            <when test="item.operation.name == 'GREAT_EQUAL_THAN'">
                <![CDATA[ ${item.column} >= #{item.value} ]]></when>
            <when test="item.operation.name == 'LESS_THAN'">
                <![CDATA[ ${item.column} < #{item.value} ]]></when>
            <when test="item.operation.name == 'LESS_EQUAL_THAN'">
                <![CDATA[ ${item.column} <= #{item.value} ]]></when>
            <when test="item.operation.name == 'BETWEEN'">
                <![CDATA[ ${item.column} BETWEEN #{item.min} AND #{item.max} ]]></when>
            <when test="item.operation.name == 'NOT_BETWEEN'">
                <![CDATA[ ${item.column} NOT BETWEEN #{item.min} AND #{item.max} ]]></when>
            <when test="item.operation.name == 'IN'">
                ${item.column} IN
                <foreach collection="item.value" index="index" item="item" open="(" separator=","
                         close=")">
                    #{item}
                </foreach>
            </when>
            <when test="item.operation.name == 'NOT_IN'">
                ${item.column} NOT IN
                <foreach collection="item.value" index="index" item="item" open="(" separator=","
                         close=")">
                    #{item}
                </foreach>
            </when>
            <when test="item.operation.name == 'LIKE'">
                <![CDATA[ ${item.column} LIKE CONCAT('%',#{item.value},'%') ]]></when>
            <when test="item.operation.name == 'NOT_LIKE'">
                <![CDATA[ ${item.column} NOT LIKE CONCAT('%',#{item.value},'%') ]]></when>
            <when test="item.operation.name == 'NULL'">
                <![CDATA[ ${item.column} = NULL ]]></when>
            <when test="item.operation.name == 'NOT_NULL'">
                <![CDATA[ ${item.column} != NULL ]]></when>
        </choose>
    </sql>


</mapper>